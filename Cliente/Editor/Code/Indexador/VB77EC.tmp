Attribute VB_Name = "Me_indexar_Sonidos"
Option Explicit

Public Type tSonido
    nombre As String
    tipo As Byte 'Efecto = 0. Sonido = 1
End Type

Public Sonidos() As tSonido

Private Const ARCHIVO = "Sonidos.ini"
Private Const archivo_compilado = "Sonidos.ind"
Private Const HEAD_ELEMENTO = ""
Private Const CDM_IDENTIFICADOR = "SONIDO"

Public Function nuevo() As Integer
    'Busco alguno que este libre
    '<EhHeader>
    On Error GoTo nuevo_Err
    '</EhHeader>
    Dim elemento As Integer
    
    #If Colaborativo = 0 Then
        nuevo = -1
        
        For elemento = 1 To UBound(Sonidos)
            If Not existe(elemento) Then
                nuevo = elemento
                Exit For
            End If
        Next
        
        'No tengo slot libre. Creo uno
        If nuevo = -1 Then
            ReDim Preserve Sonidos(0 To UBound(Sonidos) + 1) As tSonido
            nuevo = UBound(Sonidos)
        End If
    #Else
        
        nuevo = CDM.CDM_SolicitarRecurso(CDM_IDENTIFICADOR)
        
        If nuevo > UBound(Sonidos) Then
            ReDim Preserve Sonidos(0 To nuevo) As tSonido
        End If
        
        Call versionador.creado(CDM_IDENTIFICADOR, nuevo)
    #End If
    '<EhFooter>
    Exit Function
nuevo_Err:
    Call frmBug.crear(Err.Source & "Me_indexar_Sonidos.nuevo " & "", Err.Number & ": " & Err.Description)
    Call frmBug.Show(vbModal, frmMain)
    '</EhFooter>
End Function

Public Function eliminar(id As Integer)
    '<EhHeader>
    On Error GoTo eliminar_Err
    '</EhHeader>
    Call resetear(Sonidos(id))
    
    Call actualizarEnIni(id)
    
    If id = UBound(Sonidos) Then
        ReDim Preserve Sonidos(0 To UBound(Sonidos) - 1) As tSonido
    End If
    
    #If Colaborativo = 1 Then
        Call versionador.eliminado(CDM_IDENTIFICADOR, id)
    #End If
    '<EhFooter>
    Exit Function
eliminar_Err:
    Call frmBug.crear(Err.Source & "Me_indexar_Sonidos.eliminar " & "id (Integer)", Err.Number & ": " & Err.Description)
    Call frmBug.Show(vbModal, frmMain)
    '</EhFooter>
End Function

Private Sub resetear(ByRef sonido As tSonido)
    '<EhHeader>
    On Error GoTo resetear_Err
    '</EhHeader>
    sonido.nombre = ""
    sonido.tipo = 0
    '<EhFooter>
    Exit Sub
resetear_Err:
    Call frmBug.crear(Err.Source & "Me_indexar_Sonidos.resetear " & "sonido (tSonido)", Err.Number & ": " & Err.Description)
    Call frmBug.Show(vbModal, frmMain)
    '</EhFooter>
End Sub


Public Function existe(ByVal id As Integer) As Boolean
    '<EhHeader>
    On Error GoTo existe_Err
    '</EhHeader>
    Dim direccion As Byte
    
    existe = True
        
    If id > UBound(Sonidos) Then
        existe = False
        Exit Function
    End If
    
    If Sonidos(id).nombre = "" Then
        existe = False
    End If

    '<EhFooter>
    Exit Function
existe_Err:
    Call frmBug.crear(Err.Source & "Me_indexar_Sonidos.existe " & "id (Integer)", Err.Number & ": " & Err.Description)
    Call frmBug.Show(vbModal, frmMain)
    '</EhFooter>
End Function

Public Function compilar() As Boolean
'No se compila para el cliente
End Function

'*****************************************************************************
'******************** PERSISTENCIA *******************************************
Public Function cargarDesdeIni() As Boolean
    '<EhHeader>
    On Error GoTo cargarDesdeIni_Err
    '</EhHeader>
    Dim Soport  As New cIniManager
    Dim cantidad As Integer
    Dim loopElemento As Long
        
    If LenB(Dir(DBPath & ARCHIVO, vbArchive)) = 0 Then
        MsgBox "No existe " & ARCHIVO & " en la carpeta " & DBPath
        Exit Function
    End If

    Soport.Initialize DBPath & ARCHIVO
    
    cantidad = CInt(val(Soport.getNameLastSection))

    ReDim Sonidos(0 To cantidad) As tSonido

    For loopElemento = 1 To cantidad
    
        With Sonidos(loopElemento)
            .nombre = Soport.getValue(HEAD_ELEMENTO & loopElemento, "NOMBRE")
            .tipo = CByte(val(Soport.getValue(HEAD_ELEMENTO & loopElemento, "TIPO")))
        End With
    Next
    
    cargarDesdeIni = True
    
    '<EhFooter>
    Exit Function
cargarDesdeIni_Err:
    Call frmBug.crear(Err.Source & "Me_indexar_Sonidos.cargarDesdeIni " & "", Err.Number & ": " & Err.Description)
    Call frmBug.Show(vbModal, frmMain)
    '</EhFooter>
End Function

Public Sub actualizarEnIni(ByVal numero As Long)
    '<EhHeader>
    On Error GoTo actualizarEnIni_Err
    '</EhHeader>
       
    With Sonidos(numero)
        WriteVar DBPath & ARCHIVO, HEAD_ELEMENTO & CStr(numero), "NOMBRE", .nombre
        WriteVar DBPath & ARCHIVO, HEAD_ELEMENTO & CStr(numero), "TIPO", .tipo
    End With
    
    #If Colaborativo = 1 Then
        Call versionador.modificado(CDM_IDENTIFICADOR, numero)
    #End If
    '<EhFooter>
    Exit Sub
actualizarEnIni_Err:
    Call frmBug.crear(Err.Source & "Me_indexar_Sonidos.actualizarEnIni " & "numero (Long)", Err.Number & ": " & Err.Description)
    Call frmBug.Show(vbModal, frmMain)
    '</EhFooter>
End Sub
